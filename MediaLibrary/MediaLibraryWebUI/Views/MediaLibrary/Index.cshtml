@using MediaLibraryWebUI.Models.Configurations
@using MediaLibraryWebUI.Repositories
@model MediaLibraryWebUI.Models.MediaLibraryViewModel

<div id="@(HtmlControlsRepository.HomeViewId)" class="@(Model.Configuration.SelectedMediaPage != Enums.MediaPages.Home ? "d-none" : string.Empty) flex-column" 
     style="flex: 1 1 auto; overflow-y: auto; display: flex"></></div>
<div id="@(HtmlControlsRepository.PlayerViewId)" class="@(Model.Configuration.SelectedMediaPage != Enums.MediaPages.Player ? "d-none" : string.Empty) flex-column" 
     style="flex: 1 1 auto; overflow-y: auto; display: flex"></></div>
<div id="@(HtmlControlsRepository.MediaViewId)" class="@((Model.Configuration.SelectedMediaPage == Enums.MediaPages.Home || 
                                                          Model.Configuration.SelectedMediaPage == Enums.MediaPages.Player) ? "d-none" : string.Empty) flex-column" 
     style="flex: 1 1 auto; overflow-y: auto; display: flex"></></div>

<div class="d-none">
    <div id="@(nameof(MediaLibraryConfiguration))"></div>
    <div id="@(nameof(MusicConfiguration))"></div>
    <div id="@(nameof(PlayerConfiguration))"></div>
    <div id="@(nameof(PlaylistConfiguration))"></div>
    <div id="@(nameof(PodcastConfiguration))"></div>
    <div id="@(nameof(TelevisionConfiguration))"></div>
    <div id="@(nameof(HomeConfiguration))"></div>
</div>

@section scripts {
    <script type="text/javascript" defer="defer">
        function initMediaLibrary() {
            var get@(nameof(MediaLibraryConfiguration)) = callback => $('#@(nameof(MediaLibraryConfiguration))').load('@Url.Action(nameof(MediaLibraryConfiguration), "MediaLibrary")', callback),
                get@(nameof(MusicConfiguration)) = callback => $('#@(nameof(MusicConfiguration))').load('@Url.Action(nameof(MusicConfiguration), nameof(Enums.MediaPages.Music))', callback),
                get@(nameof(PlayerConfiguration)) = callback => $('#@(nameof(PlayerConfiguration))').load('@Url.Action(nameof(PlayerConfiguration), nameof(Enums.MediaPages.Player))', callback),
                get@(nameof(PlaylistConfiguration)) = callback => $('#@(nameof(PlaylistConfiguration))').load('@Url.Action(nameof(PlaylistConfiguration), nameof(Enums.MediaPages.Playlist))', callback),
                get@(nameof(PodcastConfiguration)) = callback => $('#@(nameof(PodcastConfiguration))').load('@Url.Action(nameof(PodcastConfiguration), nameof(Enums.MediaPages.Podcast))', callback),
                get@(nameof(TelevisionConfiguration)) = callback => $('#@(nameof(TelevisionConfiguration))').load('@Url.Action(nameof(TelevisionConfiguration), nameof(Enums.MediaPages.Television))', callback),
                get@(nameof(HomeConfiguration)) = callback => $('#@(nameof(HomeConfiguration))').load('@Url.Action(nameof(HomeConfiguration), nameof(Enums.MediaPages.Home))', callback);

            get@(nameof(MediaLibraryConfiguration))(() =>
                get@(nameof(MusicConfiguration))(() =>
                    get@(nameof(PlayerConfiguration))(() =>
                        get@(nameof(PlaylistConfiguration))(() =>
                            get@(nameof(PodcastConfiguration))(() =>
                                get@(nameof(TelevisionConfiguration))(() => {
                                    showLoading();
                                    $('#@(HtmlControlsRepository.PlayerViewId)').load('@Url.Action("Index", "Player")', () => {
                                        hideLoading();
                                        loadView('@(Model.Configuration.SelectedMediaPage.ToString())');
                                    });
                                })
                            )
                        )
                    )
                )
            );
        }

        function loadView(view, callback) {
            var success = () => {
                if (typeof callback === 'function') /*then*/ callback();
                loadTooltips($(container)[0]);
                hideLoading();
            },
                url = '@Url.Action("Index", "ViewName")',
                container = null;

            collapseNavbar();
            showLoading();
            set@(nameof(MediaLibraryConfiguration))_@(nameof(MediaLibraryConfiguration.SelectedMediaPage))(view);
            disableNavItem(view);
            $('#@(HtmlControlsRepository.MediaViewId), #@(HtmlControlsRepository.PlayerViewId), #@(HtmlControlsRepository.HomeViewId)').each((index, element) => disposeTooltips(element));
            $('#@(HtmlControlsRepository.PlayerViewId), #@(HtmlControlsRepository.MediaViewId), #@(HtmlControlsRepository.HomeViewId)').addClass('d-none');
            $('#@(HtmlControlsRepository.HeaderControlsContainerId)').removeClass('d-none');

            if (view === '@(Enums.MediaPages.Player)') {
                update@(nameof(MediaLibraryConfiguration))(success);
                $(container = '#@(HtmlControlsRepository.PlayerViewId)').removeClass('d-none');
                $('#@(HtmlControlsRepository.HeaderControlsContainerId)').addClass('d-none');
            } else if (view === '@(Enums.MediaPages.Home)') {
                $(container = '#@(HtmlControlsRepository.HomeViewId)').removeClass('d-none');
                update@(nameof(MediaLibraryConfiguration))(() => $('#@(HtmlControlsRepository.HomeViewId)').load(url.replace("ViewName", view), success));
            } else {
                update@(nameof(MediaLibraryConfiguration))(() => $('#@(HtmlControlsRepository.MediaViewId)').load(url.replace("ViewName", view), success));
                $(container = '#@(HtmlControlsRepository.MediaViewId)').removeClass('d-none');
            }
        }

        function artistClicked(btn) {
            showLoading();
            set@(nameof(MusicConfiguration))_@(nameof(MusicConfiguration.SelectedMusicPage))('@(nameof(Enums.MusicPages.Artist))');
            set@(nameof(MusicConfiguration))_@(nameof(MusicConfiguration.SelectedArtistId))($(btn).attr('data-item-id'));
            update@(nameof(MusicConfiguration))(() => loadView('@(nameof(Enums.MediaPages.Music))'));
        }

        function albumClicked(btn) {
            showLoading();
            set@(nameof(MusicConfiguration))_@(nameof(MusicConfiguration.SelectedMusicPage))('@(nameof(Enums.MusicPages.Album))');
            set@(nameof(MusicConfiguration))_@(nameof(MusicConfiguration.SelectedAlbumId))($(btn).attr('data-item-id'));
            update@(nameof(MusicConfiguration))(() => loadView('@(nameof(Enums.MediaPages.Music))'));
        }

        initMediaLibrary();
    </script>
}

