@using MediaLibraryWebUI.Models.Configurations
@model MediaLibraryWebUI.Models.PlayerViewModel

@{
    ViewBag.Title = "Player";
}

<div class="d-flex w-100 h-100">
    <div style="flex: 0 0 50%; padding: 0px 5px 0px 5px">
        <audio id="@(Model.MusicPlayerId)" class="@(Model.Configuration.SelectedMediaType == Enums.MediaTypes.Television ? "d-none" : string.Empty)"
               preload="auto" controls="controls" style="position: sticky; top: 0px; position: -webkit-sticky" />
        <video id="@(Model.VideoPlayerId)" class="@(Model.Configuration.SelectedMediaType == Enums.MediaTypes.Television ? string.Empty : "d-none")"
               preload="auto" controls="controls" style="position: sticky; top: 0px; position: -webkit-sticky" />
    </div>
    <div class="card" style="flex: 0 0 50%">
        <div class="card-header" style="position: sticky; top: 0px">Now Playing</div>
        <div id="playerItems" style="overflow-y: auto; position: relative"></div>
    </div>
</div>

@Html.Partial("~/Views/Shared/Configurations/PlayerConfiguration.cshtml", Model.Configuration)

<script type="text/javascript" defer="defer">
    function _play(item) {
        var $audioPlayer = $('#@(Model.MusicPlayerId)'),
            $videoPlayer = $('#@(Model.VideoPlayerId)'),
            selectedMediaType = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedMediaType))(),
            $player = selectedMediaType === '@(Enums.MediaTypes.Television)' ? $videoPlayer : $audioPlayer;

        $audioPlayer.addClass('d-none');
        $videoPlayer.addClass('d-none');
        $player.removeClass('d-none');
        $audioPlayer.prop('src', '');
        $videoPlayer.prop('src', '');
        $audioPlayer.attr('data-item-id', '');
        $videoPlayer.prop('data-item-id', '');

        if (item) {
            var $item = $(item),
                url = $item.attr('data-play-url'),
                index = $item.attr('data-play-index'),
                id = $item.attr('data-item-id');

            $('li[data-play-index].list-group-item').removeClass('active');
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.CurrentItemIndex))(index);
            update@(nameof(PlayerConfiguration))(function () {
                $item.addClass('active');
                $player.attr('data-item-id', id);
                $player.prop('src', url).trigger('play');
                updateScrollTop();
            });
        } else if ($('li[data-play-index].active').length === 1) {
            _play($('li[data-play-index].active')[0]);
        }
    }

    function initPlayer() {
        var updatePlayCount = btn => {
            var id = $(btn).attr('data-item-id');

            $.post('@Url.Action("UpdatePlayCount", "Player")', { mediaType: getSelectedMediaType(), id: id }, () => playNext());
        };

        $('#@(Model.MusicPlayerId)').on('ended', function (evt) {
            updatePlayCount(this);
        });

        $('#@(Model.VideoPlayerId)').on('ended', function (evt) {
            updatePlayCount(this);
        });

        $('#@(Model.HeaderPlayButtonId)').on('click', () => _play());
        $('#@(Model.HeaderNextButtonId)').on('click', () => playNext());
        $('#@(Model.HeaderPreviousButtonId)').on('click', () => playPrevious());
    }

    function playNext() {
        var nextIndex = parseInt(get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.CurrentItemIndex))()) + 1,
            $item,
            repeat = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Repeat))(),
            $audioPlayer = $('#@(Model.MusicPlayerId)'),
            $videoPlayer = $('#@(Model.VideoPlayerId)'),
            selectedMediaType = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedMediaType))(),
            $player = selectedMediaType === '@(Enums.MediaTypes.Television)' ? $videoPlayer : $audioPlayer;

        if (repeat === '@(nameof(Enums.RepeatTypes.RepeatOne))') {
            $player.trigger('play');
        } else if (repeat === '@(nameof(Enums.RepeatTypes.RepeatAll))') {
            if (nextIndex === $('li[data-play-index]').length) {
                $item = $('li[data-play-index="0"]');
                _play($item[0]);
            } else {
                $item = $('li[data-play-index="' + nextIndex + '"]');
                _play($item[0]);
            }
        } else {
            $item = $('li[data-play-index=' + nextIndex + ']');

            if (nextIndex !== $('li[data-play-index]').length) {
                _play($item[0]);
            }
        }
    }

    function playPrevious() {
        var previousIndex = parseInt(get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.CurrentItemIndex))()) - 1,
            $item = $('li[data-play-index="' + previousIndex + '"]');

        _play($item[0]);
    }

    function reload(callback) {
        var success = () => {
            updateScrollTop();
            if (typeof callback === 'function') /*then*/ callback();
            $('#playerItems *[data-tooltip="tooltip"]').tooltip({ trigger: 'hover' });
        };

        $('#playerItems').html('');
        $('#playerItems').load('@(Url.Action("GetPlayerItems", "Player"))', success);
    }

    function updateScrollTop() {
        var $item = $('li.active');

        if ($item.length > 0) {
            $('#playerItems').scrollTop($('#playerItems').scrollTop() - $item.position().top * -1);
        }
    }

    function setInitialPlayerUrl() {
        var url = $('li.active').attr('data-play-url');

        $('audio:not(audio.d-none),video:not(video.d-none)').attr('src', url);
    }
     
    initPlayer();
</script>

