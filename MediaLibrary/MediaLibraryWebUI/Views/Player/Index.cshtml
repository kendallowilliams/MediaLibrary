@using MediaLibraryWebUI.Models.Configurations
@using MediaLibraryWebUI.Repositories
@model MediaLibraryWebUI.Models.PlayerViewModel

@{
    ViewBag.Title = "Player";
}

<div class="d-flex flex-column" style="flex: 1 1 auto; overflow-y: auto">
    <div style="flex: 0 0 auto">
        <div class="d-flex flex-row">
            <div style="flex: 0 0 auto"><h2>Now Playing</h2></div>
            <div style="flex: 0 1 auto; overflow-x: auto">
                <h2 id="@(HtmlControlsRepository.NowPlayingTitleId)" style="text-overflow: ellipsis; overflow: hidden; white-space: nowrap"></h2>
            </div>
        </div>
        <hr />
    </div>
    <div class="card" style="flex: 1 1 auto; overflow-y: auto">
        <div class="card-body d-flex m-0 p-0 rounded-top" style="flex: 1 1 auto; overflow-y: auto">
            <div id="@(HtmlControlsRepository.PlayerItemsContainerId)" class="@(Model.Configuration.SelectedPlayerPage == Enums.PlayerPages.Index ? string.Empty : "d-none")" style="flex: 1 1 auto; overflow-y: auto"></div>
            <div id="@(HtmlControlsRepository.PlayerAudioContainerId)" style="flex: 1 1 auto; display: flex; overflow-x: auto" class="@(Model.Configuration.SelectedPlayerPage == Enums.PlayerPages.Audio ? string.Empty : "d-none") flex-column">
                <audio id="@(HtmlControlsRepository.MusicPlayerId)" class="d-none" @(Model.Configuration.Muted ? "muted=\"muted\"" : string.Empty) preload="metadata" data-player-page="@(Enums.PlayerPages.Audio)" />
                <canvas id="@(HtmlControlsRepository.AudioVisualizerId)"></canvas>
            </div>
            <div id="@(HtmlControlsRepository.PlayerVideoContainerId)" style="flex: 1 1 auto; display: flex; background-color: black" class="@(Model.Configuration.SelectedPlayerPage == Enums.PlayerPages.Video ? string.Empty : "d-none")">
                <video id="@(HtmlControlsRepository.VideoPlayerId)" @(Model.Configuration.Muted ? "muted=\"muted\"" : string.Empty) preload="metadata" style="flex: 1 1 auto" data-player-page="@(Enums.PlayerPages.Video)" />
            </div>
        </div>
        <div class="card-footer d-flex align-items-center" style="flex: 0 0 auto">
            <div class="" style="flex: 0 0 auto">
                <button id="@(HtmlControlsRepository.PlayerPreviousButtonId)" class="btn btn-sm btn-outline-secondary"><i class="fa fa-step-backward"></i></button>
                <button id="@(HtmlControlsRepository.PlayerPlayButtonId)" class="btn btn-outline-secondary"><i class="fa fa-play"></i></button>
                <button id="@(HtmlControlsRepository.PlayerPauseButtonId)" class="btn btn-outline-secondary d-none"><i class="fa fa-pause"></i></button>
                <button id="@(HtmlControlsRepository.PlayerNextButtonId)" class="btn btn-sm btn-outline-secondary"><i class="fa fa-step-forward"></i></button>
            </div>
            <div class="d-flex mr-3 ml-3 flex-row align-items-center justify-content-center justify-content-lg-end" style="flex: 1 1 auto">
                <div id="@(HtmlControlsRepository.PlayerSliderId)" class="mr-3 d-none d-lg-block" style="flex: 1 1 auto" data-slide-started="false"></div>
                <div id="@(HtmlControlsRepository.PlayerTimeId)" class="text-muted" style="flex: 0 0 auto">00:00/00:00</div>
            </div>
            <div style="flex: 0 0 auto">
                <button id="@(HtmlControlsRepository.PlayerPlaylistToggleButtonId)" class="btn btn-sm btn-outline-secondary @(Model.Configuration.SelectedPlayerPage == Enums.PlayerPages.Index ? "active" : string.Empty)"
                        onclick="togglePlaylist(this)">
                    <i class="fa fa-list-ul"></i>
                </button>
                <span class="d-none d-lg-inline-block">
                    <button id="@(HtmlControlsRepository.PlayerShuffleButtonId)" class="btn btn-sm btn-outline-secondary"><i class="fa fa-random"></i></button>
                    <button id="@(HtmlControlsRepository.PlayerRepeatButtonId)" data-repeat-type="@(nameof(Enums.RepeatTypes.None))" class="btn btn-sm btn-outline-secondary @(Model.Configuration.Repeat == Enums.RepeatTypes.None ? string.Empty : "d-none")">
                        <i class="fa fa-sync"></i>
                    </button>
                    <button id="@(HtmlControlsRepository.PlayerRepeatOneButtonId)" data-repeat-type="@(nameof(Enums.RepeatTypes.RepeatOne))" class="btn btn-sm btn-outline-secondary active @(Model.Configuration.Repeat == Enums.RepeatTypes.RepeatOne ? string.Empty : "d-none")">
                        <i class="fa fa-xs fa-sync"><sub>1</sub></i>
                    </button>
                    <button id="@(HtmlControlsRepository.PlayerRepeatAllButtonId)" data-repeat-type="@(nameof(Enums.RepeatTypes.RepeatAll))" class="btn btn-sm btn-outline-secondary active @(Model.Configuration.Repeat == Enums.RepeatTypes.RepeatAll ? string.Empty : "d-none")">
                        <i class="fa fa-sync"></i>
                    </button>
                </span>
                <span id="@(HtmlControlsRepository.PlayerVolumeContainerId)">
                    <button id="@(HtmlControlsRepository.PlayerVolumeButtonId)" class="btn btn-sm btn-outline-secondary @(Model.Configuration.Muted ? "d-none" : string.Empty)"
                            data-volume="@(Model.Configuration.Volume)">
                        <i class="fa fa-volume-up"></i>
                    </button>
                    <button id="@(HtmlControlsRepository.PlayerMuteButtonId)" class="btn btn-sm btn-outline-secondary active @(Model.Configuration.Muted ? string.Empty : "d-none")">
                        <i class="fa fa-volume-mute"></i>
                    </button>
                </span>
                <button id="@(HtmlControlsRepository.PlayerFullscreenButtonId)" class="btn btn-sm btn-outline-secondary @(Model.Configuration.SelectedPlayerPage == Enums.PlayerPages.Video ? string.Empty : "d-none")">
                    <i class="fa fa-expand"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" defer="defer">
    var audioVisualizer = null,
        unPlayedShuffleIds = [];
        
    function loadItem(item, triggerPlay) {
        var $players = $('#@(HtmlControlsRepository.VideoPlayerId), #@(HtmlControlsRepository.MusicPlayerId)'),
            $player = $(getPlayer()),
            shuffle = isShuffleEnabled();

        $players.prop('src', '').attr('data-item-id', '');

        if (item) {
            var $item = $(item),
                url = $item.attr('data-play-url'),
                index = $item.attr('data-play-index'),
                id = $item.attr('data-item-id'),
                title = $item.attr('data-title') || '';

            $('li[data-play-index].list-group-item').removeClass('active');
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.CurrentItemIndex))(index);
            update@(nameof(PlayerConfiguration))(function () {
                $item.addClass('active');
                $player.attr('data-item-id', id);
                $('#@(HtmlControlsRepository.NowPlayingTitleId)').text(title.length > 0 ? ': ' + title : title);
                if (shuffle && $.inArray(index, unPlayedShuffleIds) >= 0) /*then*/ unPlayedShuffleIds.splice(unPlayedShuffleIds.indexOf(index), 1);
                updateScrollTop();
                $player.prop('src', url);
                if (triggerPlay) /*then*/ $player.trigger('play');
                enableDisablePreviousNext();
            });
        } else if ($('li[data-play-index].active').length === 1) {
            loadItem($('li[data-play-index].active')[0], triggerPlay);
        }
    }

    function initPlayer() {
        initCanvas();
        initMediaPlayers();
        initPlayerControls();
        reload(() => loadItem());
    }

    function initCanvas() {
        var $canvas = $('#@(HtmlControlsRepository.AudioVisualizerId)');

        AudioVisualizer.prepareCanvas($canvas[0], $canvas.parent().width(), $canvas.parent().height());
    }

    function initMediaPlayers() {
        $('#@(HtmlControlsRepository.MusicPlayerId), #@(HtmlControlsRepository.VideoPlayerId)').on('ended', (e) => updatePlayCount(e.target, loadNext));
        $('#@(HtmlControlsRepository.MusicPlayerId), #@(HtmlControlsRepository.VideoPlayerId)').prop('volume', parseInt(get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Volume))()) / 100.0);

        $('#@(HtmlControlsRepository.MusicPlayerId), #@(HtmlControlsRepository.VideoPlayerId)').on('durationchange', function (e) {
            $('#@(HtmlControlsRepository.PlayerSliderId)').slider('option', 'max', e.target.duration);
            $('#@(HtmlControlsRepository.PlayerTimeId)').text(getPlaybackTime(e.target.currentTime, e.target.duration));
        });

        $('#@(HtmlControlsRepository.MusicPlayerId), #@(HtmlControlsRepository.VideoPlayerId)').on('timeupdate', function (e) {
            enableDisablePreviousNext();
            if ($('#@(HtmlControlsRepository.PlayerSliderId)').attr('data-slide-started') !== 'true') {
                $('#@(HtmlControlsRepository.PlayerSliderId)').slider('value', Math.floor(e.target.currentTime));
                $('#@(HtmlControlsRepository.PlayerTimeId)').text(getPlaybackTime(e.target.currentTime, e.target.duration));
            }
        });

        $('#@(HtmlControlsRepository.MusicPlayerId), #@(HtmlControlsRepository.VideoPlayerId)').on('play', function (e) {
            var mediaType = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedMediaType))();

            if (getPlayer().duration === Infinity) /*then*/ getPlayer().src = getPlayer().src;
            $(e.target).attr('data-playing', 'true');
            $('#@(HtmlControlsRepository.HeaderPlayButtonId), #@(HtmlControlsRepository.PlayerPlayButtonId)').addClass('d-none');
            $('#@(HtmlControlsRepository.HeaderPauseButtonId), #@(HtmlControlsRepository.PlayerPauseButtonId)').removeClass('d-none');
            initAudioVisualizer();
            if (audioVisualizer && mediaType !== '@(nameof(Enums.MediaTypes.Television))') /*then*/ audioVisualizer.start();
        });

        $('#@(HtmlControlsRepository.MusicPlayerId), #@(HtmlControlsRepository.VideoPlayerId)').on('pause', function (e) {
            $('#@(HtmlControlsRepository.HeaderPauseButtonId), #@(HtmlControlsRepository.PlayerPauseButtonId)').addClass('d-none');
            $('#@(HtmlControlsRepository.HeaderPlayButtonId), #@(HtmlControlsRepository.PlayerPlayButtonId)').removeClass('d-none');
            if (audioVisualizer) /*then*/ audioVisualizer.pause();
        });

        $('#@(HtmlControlsRepository.MusicPlayerId), #@(HtmlControlsRepository.VideoPlayerId)').on('error', (e) => null);
    }

    function initPlayerControls() {
        var $volumeSlider = $('<div id="@(HtmlControlsRepository.VolumeSliderId)"></div>').addClass('m-1');

        $('#@(HtmlControlsRepository.PlayerSliderId)').slider({ min: 0, max: 100 });
        $volumeSlider.slider({
            min: 0,
            max: 100,
            orientation: 'vertical',
            value: get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Muted))().toLowerCase() === 'true' ?
                   0 : parseInt(get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Volume))())
        });
        $('#@(HtmlControlsRepository.PlayerVolumeContainerId)').popover({
            trigger: 'hover',
            content: $volumeSlider[0],
            placement: 'top',
            html: true,
            container: $('#@(HtmlControlsRepository.PlayerVolumeContainerId)')[0]
        });
        $volumeSlider.on('slide', (e, ui) => {
            var volume = ui.value;

            $('#@(HtmlControlsRepository.PlayerVolumeButtonId), #@(HtmlControlsRepository.PlayerMuteButtonId)').attr('data-volume', volume).addClass('d-none');
            $(volume == 0 ? '#@(HtmlControlsRepository.PlayerMuteButtonId)' : '#@(HtmlControlsRepository.PlayerVolumeButtonId)').removeClass('d-none');
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Volume))(volume);
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Muted))(volume == 0);
            $('#@(HtmlControlsRepository.MusicPlayerId), #@(HtmlControlsRepository.VideoPlayerId)').prop('volume', volume / 100.0).prop('muted', volume == 0)
        });
        $volumeSlider.on('slidechange', (e, ui) => {
            var volume = ui.value;

            update@(nameof(PlayerConfiguration))();
        });
        $('#@(HtmlControlsRepository.PlayerSliderId)').on('slide', function (e, ui) {
            if ($(e.target).attr('data-slide-started') === 'true') {
                $(getPlayer()).prop('currentTime', ui.value);
                $('#@(HtmlControlsRepository.PlayerTimeId)').text(getPlaybackTime(ui.value, $(e.target).slider('option', 'max')));
            }
        });
        $('#@(HtmlControlsRepository.PlayerSliderId)').on('slidestart', (e, ui) => $(e.target).attr('data-slide-started', 'true'));
        $('#@(HtmlControlsRepository.PlayerSliderId)').on('slidestop', (e, ui) => $(e.target).attr('data-slide-started', 'false'));
        $('#@(HtmlControlsRepository.HeaderNextButtonId), #@(HtmlControlsRepository.PlayerNextButtonId)').on('click', () => loadNext());
        $('#@(HtmlControlsRepository.HeaderPreviousButtonId), #@(HtmlControlsRepository.PlayerPreviousButtonId)').on('click', () => loadPrevious());
        $('#@(HtmlControlsRepository.HeaderPauseButtonId), #@(HtmlControlsRepository.PlayerPauseButtonId)').on('click', () => $(getPlayer()).attr('data-playing', 'false').trigger('pause'));
        $('#@(HtmlControlsRepository.HeaderPlayButtonId), #@(HtmlControlsRepository.PlayerPlayButtonId)').on('click', () => {
            if (getPlayer().currentSrc) /*then*/ $(getPlayer()).trigger('play');
        });
        $('#@(HtmlControlsRepository.HeaderShuffleButtonId), #@(HtmlControlsRepository.PlayerShuffleButtonId)').addClass(isShuffleEnabled() ? 'active' : '');
        $('button[data-repeat-type]').on('click', () => {
            var repeat = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Repeat))();

            $('button[data-repeat-type]').addClass('d-none');

            if (repeat === '@nameof(Enums.RepeatTypes.None)') {
                repeat = '@nameof(Enums.RepeatTypes.RepeatOne)';
            } else if (repeat === '@nameof(Enums.RepeatTypes.RepeatOne)') {
                repeat = '@nameof(Enums.RepeatTypes.RepeatAll)';
            } else if (repeat === '@nameof(Enums.RepeatTypes.RepeatAll)') {
                repeat = '@nameof(Enums.RepeatTypes.None)';
            }

            $('button[data-repeat-type="' + repeat + '"]').removeClass('d-none');
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Repeat))(repeat);
            update@(nameof(PlayerConfiguration))(() => enableDisablePreviousNext());
        });
        $('#@(HtmlControlsRepository.HeaderShuffleButtonId), #@(HtmlControlsRepository.PlayerShuffleButtonId)').on('click', function () {
            var shuffle = isShuffleEnabled(),
                $btns = $('#@(HtmlControlsRepository.HeaderShuffleButtonId), #@(HtmlControlsRepository.PlayerShuffleButtonId)');
            
            setUnPlayedShuffleIds(!shuffle);
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Shuffle))(!shuffle);
            update@(nameof(PlayerConfiguration))(() => {
                if (!shuffle) {
                    $btns.addClass('active');
                } else {
                    $btns.removeClass('active');
                }
                enableDisablePreviousNext();
            });
        });
        $('#@(HtmlControlsRepository.PlayerVolumeButtonId), #@(HtmlControlsRepository.PlayerMuteButtonId)').on('click', function (e) {
            var previousVolume = parseInt($('#@(HtmlControlsRepository.PlayerVolumeButtonId)').attr('data-volume')),
                $btn = $(e.currentTarget),
                muted = false;

            $('#@(HtmlControlsRepository.PlayerVolumeButtonId), #@(HtmlControlsRepository.PlayerMuteButtonId)').addClass('d-none');

            if ($btn.attr('id') === '@(HtmlControlsRepository.PlayerVolumeButtonId)') {
                $('#@(HtmlControlsRepository.PlayerMuteButtonId)').removeClass('d-none');
                $volumeSlider.slider('value', 0);
                muted = true;
            } else if ($btn.attr('id') === '@(HtmlControlsRepository.PlayerMuteButtonId)') {
                $('#@(HtmlControlsRepository.PlayerVolumeButtonId)').removeClass('d-none');
                $volumeSlider.slider('value', previousVolume);
            }

            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Muted))(muted);
            update@(nameof(PlayerConfiguration))(() => $(getPlayers()).each((index, element) => element.muted = muted));
        });
        $('#@(HtmlControlsRepository.PlayerFullscreenButtonId)').on('click', () => openFullscreen(getPlayer()));
        $('button[data-repeat-type="' + get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Repeat))() + '"]').removeClass('d-none');
    }

    function initAudioVisualizer() {
        if (!audioVisualizer) {
            audioVisualizer = new AudioVisualizer($('#@(HtmlControlsRepository.AudioVisualizerId)')[0], $('#@(HtmlControlsRepository.MusicPlayerId)')[0]);
        }
    }

    function updatePlayCount(player, callback) {
        var id = $(player).attr('data-item-id'),
            success = typeof (callback) === 'function' ? callback : () => null;

        $.post('@Url.Action("UpdatePlayCount", "Player")', { mediaType: get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedMediaType))(), id: id }, success);
    }

    function loadNext() {
        var shuffle = isShuffleEnabled(),
            nextIndex = shuffle ? unPlayedShuffleIds[getRandomInteger(0, unPlayedShuffleIds.length - 1)] :
                                  parseInt(get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.CurrentItemIndex))()) + 1,
            $item = null,
            repeat = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Repeat))(),
            shuffleEmpty = shuffle && unPlayedShuffleIds.length == 0;
        
        if (repeat === '@(nameof(Enums.RepeatTypes.RepeatOne))') {
            $(getPlayer()).prop('currentTime', 0);
        } else if (repeat === '@(nameof(Enums.RepeatTypes.RepeatAll))') {
            if (shuffleEmpty) {
                setUnPlayedShuffleIds(shuffle);
                loadNext();
            }
            else if (nextIndex === $('li[data-play-index]').length) {
                $item = $('li[data-play-index="0"]');
                loadItem($item[0], isPlaying());
            } else {
                $item = $('li[data-play-index="' + nextIndex + '"]');
                loadItem($item[0], isPlaying());
            }
        } else {
            $item = $('li[data-play-index=' + nextIndex + ']');

            if (!shuffleEmpty || (!shuffle && nextIndex < $('li[data-play-index]').length)) {
                loadItem($item[0], isPlaying());
            } else {
                $('#@(HtmlControlsRepository.PlayerPauseButtonId)').trigger('click');
                enableDisablePreviousNext();
            }
        }
    }

    function loadPrevious() {
        var shuffle = isShuffleEnabled(),
            previousIndex = shuffle ? unPlayedShuffleIds[getRandomInteger(0, unPlayedShuffleIds.length - 1)] :
                                      parseInt(get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.CurrentItemIndex))()) - 1,
            $item = $('li[data-play-index="' + previousIndex + '"]'),
            player = getPlayer(),
            shuffleEmpty = shuffle && unPlayedShuffleIds.length == 0,
            repeat = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Repeat))();

        if (repeat === '@(nameof(Enums.RepeatTypes.RepeatOne))' || player.currentTime > @(Model.NumberOfSecondsBeforeRestart)) {
            player.currentTime = 0;
        }
        else if (shuffleEmpty) {
            setUnPlayedShuffleIds(shuffle);
            loadPrevious();
        }
        else loadItem($item[0], isPlaying());
    }

    function canPlayNext() {
        return (isShuffleEnabled() && unPlayedShuffleIds.length > 0) ||
                get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Repeat))() === '@(nameof(Enums.RepeatTypes.RepeatAll))' ||
                parseInt(get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.CurrentItemIndex))()) < ($('li[data-play-index]').length - 1);
    }

    function canPlayPrevious() {
        return isShuffleEnabled() ||
               parseInt(get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.CurrentItemIndex))()) > 0 ||
               getPlayer().currentTime > @(Model.NumberOfSecondsBeforeRestart) ||
               get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Repeat))() === '@(nameof(Enums.RepeatTypes.RepeatAll))';
    }

    function isShuffleEnabled() { return get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.Shuffle))().toLowerCase() === 'true'; }

    function isPlaying() { return $(getPlayer()).attr('data-playing') === 'true'; }

    function enableDisablePreviousNext() {
        $('#@(HtmlControlsRepository.HeaderNextButtonId), #@(HtmlControlsRepository.PlayerNextButtonId)').prop('disabled', !canPlayNext());
        $('#@(HtmlControlsRepository.HeaderPreviousButtonId), #@(HtmlControlsRepository.PlayerPreviousButtonId)').prop('disabled', !canPlayPrevious());
    }

    function handle@(Enums.MediaPages.Player)Loaded() {
        initCanvas();
        enableDisablePreviousNext();
        setUnPlayedShuffleIds(isShuffleEnabled());
    }

    function setUnPlayedShuffleIds(shuffle) {
        var $items = $('li[data-play-index]');

        unPlayedShuffleIds = shuffle && $items.length > 0 ? $.makeArray($items.map((index, element) => $(element).attr('data-play-index'))) : [];
    }

    function reload(callback) {
        var success = () => {
            loadTooltips($('#@(HtmlControlsRepository.PlayerItemsContainerId)')[0]);
            updateSelectedPlayerPage();
            if (typeof callback === 'function') /*then*/ callback();
        };

        $('#@(HtmlControlsRepository.PlayerItemsContainerId)').html('');
        $('#@(HtmlControlsRepository.PlayerItemsContainerId)').load('@(Url.Action("GetPlayerItems", "Player"))', success);
    }

    function updateScrollTop() {
        var $item = $('li[data-play-index].active');

        if ($item.length > 0) {
            $('#@(HtmlControlsRepository.PlayerItemsContainerId)').scrollTop($('#@(HtmlControlsRepository.PlayerItemsContainerId)').scrollTop() - $item.position().top * -1);
        }
    }

    function getPlayer() {
        var $audioPlayer = $('#@(HtmlControlsRepository.MusicPlayerId)'),
            $videoPlayer = $('#@(HtmlControlsRepository.VideoPlayerId)'),
            selectedMediaType = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedMediaType))();

        return selectedMediaType === '@(Enums.MediaTypes.Television)' ? $videoPlayer[0] : $audioPlayer[0];
    }

    function getPlayers() {
        return $('audio, video').toArray();
    }

    function togglePlaylist(btn) {
        var page = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))(),
            $player = $(getPlayer()),
            $playerItems = $('#@(HtmlControlsRepository.PlayerItemsContainerId)'),
            $btn = $(btn);

        $('#@(HtmlControlsRepository.PlayerFullscreenButtonId)').addClass('d-none');
        if (page === '@(nameof(Enums.PlayerPages.Index))') {
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))($player.attr('data-player-page'));
            $player.parent().removeClass('d-none');
            $playerItems.addClass('d-none');
            $btn.removeClass('active');
            page = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))();
            if (page === '@(nameof(Enums.PlayerPages.Video))') /*then*/ $('#@(HtmlControlsRepository.PlayerFullscreenButtonId)').removeClass('d-none');
            else if (page === '@(nameof(Enums.PlayerPages.Audio))') /*then*/ initCanvas();
        } else {
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))('@(nameof(Enums.PlayerPages.Index))');
            $player.parent().addClass('d-none');
            $playerItems.removeClass('d-none');
            $btn.addClass('active');
        }
        update@(nameof(PlayerConfiguration))();
    }

    function updateSelectedPlayerPage() {
        var selectedMediaType = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedMediaType))(),
            selectedPlayerPage = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))();

        if (selectedMediaType === '@(Enums.MediaTypes.Television)' && selectedPlayerPage === '@(nameof(Enums.PlayerPages.Audio))') {
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))('@(nameof(Enums.PlayerPages.Video))');
        } else if (selectedMediaType !== '@(Enums.MediaTypes.Television)' && selectedPlayerPage === '@(nameof(Enums.PlayerPages.Video))') {
            set@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))('@(nameof(Enums.PlayerPages.Audio))');
        }

        if (selectedPlayerPage !== get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))()) {
            selectedPlayerPage = get@(nameof(PlayerConfiguration))_@(nameof(PlayerConfiguration.SelectedPlayerPage))();
            $('#@(HtmlControlsRepository.PlayerFullscreenButtonId)').addClass('d-none');

            update@(nameof(PlayerConfiguration))(() =>
                $('#@(HtmlControlsRepository.VideoPlayerId), #@(HtmlControlsRepository.MusicPlayerId)').each((index, element) => {
                    var page = $(element).attr('data-player-page');

                    if (page === selectedPlayerPage) /*then*/ $(element).parent().removeClass('d-none');
                    else $(element).parent().addClass('d-none');
                })
            );

            if (selectedPlayerPage === '@(nameof(Enums.PlayerPages.Video))') /*then*/ $('#@(HtmlControlsRepository.PlayerFullscreenButtonId)').removeClass('d-none');
        }
    }

    function getPlaybackTime(time, duration) {
        return getFormattedTime(time) + '/' + getFormattedTime(duration);
    }

    function getFormattedTime(time) {
        var adjustedTime = Number.isNaN(time) || !Number.isFinite(time) ? 0 : time,
            currentHours = Math.floor(adjustedTime / 3600),
            currentMinutes = Math.floor((adjustedTime - (currentHours * 3600)) / 60),
            currentSeconds = Math.floor((adjustedTime - (currentMinutes * 60 + currentHours * 3600)) % 60),
            currentTime = (currentHours > 0 ? String(currentHours).padStart(2, '0') + ':' : '') + String(currentMinutes).padStart(2, '0') + ':' + String(currentSeconds).padStart(2, '0');

        return currentTime;
    }

    class AudioVisualizer {
        constructor(canvas, source) {
            this.playerStopped = false;
            this.mediaSource = source;
            this.canvas = canvas;
            this.containerHeight = () => $(this.canvas).parent().height();
            this.containerWidth = () => $(this.canvas).parent().width();
            this.canvasContext = this.canvas.getContext('2d');
            this.init();
        }

        init() {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
            this.analyser = this.audioContext.createAnalyser();
            this.source = this.audioContext.createMediaElementSource(this.mediaSource);

            this.analyser.fftSize = 256;
            this.bufferLength = this.analyser.frequencyBinCount;
            this.dataArray = new Uint8Array(this.bufferLength);
            this.previousDataArray = new Uint8Array(this.bufferLength);
            this.source.connect(this.audioContext.destination);
            this.source.connect(this.analyser);
            this.analyser.connect(this.audioContext.destination);
        }

        clear(width, height) {
            this.canvasContext.clearRect(0, 0, width, height);
        }

        static prepareCanvas(canvas, width, height) {
            var canvasContext = canvas.getContext('2d');

            canvas.width = width;
            canvas.height = height;
            canvasContext.fillStyle = 'rgb(200, 200, 200)';
            canvasContext.fillRect(0, 0, width, height);
        }

        draw() {
            var width = this.containerWidth(),
                height = this.containerHeight(),
                numberOfBars = 128,
                barWidth = this.canvas.width / numberOfBars,
                barHeight = 0,
                discY = 0,
                discHeight = 5,
                x = 0,
                step = Math.floor(this.bufferLength / numberOfBars);

            this.clear(this.canvas.width, this.canvas.height);
            this.analyser.getByteFrequencyData(this.dataArray);
            AudioVisualizer.prepareCanvas(this.canvas, width, height);
            for (var i = 0; i < this.previousDataArray.length; i++) {
                if (this.dataArray[i] > this.previousDataArray[i]) {
                    this.previousDataArray[i] = this.dataArray[i];
                } else if (this.previousDataArray[i] > 0) {
                    this.previousDataArray[i] -= 1;
                }
            }
            for (var i = 0; i < numberOfBars; i++) {
                barHeight = this.dataArray[i * step] * Math.floor(height / @(byte.MaxValue));
                discY = (this.previousDataArray[i * step] * Math.floor(height / @(byte.MaxValue))) + discHeight;
                this.canvasContext.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';
                this.canvasContext.fillRect(x, height - barHeight, barWidth - 1, barHeight);
                this.canvasContext.fillStyle = 'white';
                this.canvasContext.fillRect(x, height - discY - 1, barWidth - 1, discHeight);
                x += barWidth;
            }

            if (this.playerStopped) {
                this.reset();
            }
            else window.requestAnimationFrame(this.draw.bind(this));
        }

        reset() {
                var width = this.containerWidth(),
                    height = this.containerHeight(),
                    numberOfBars = 128,
                    barWidth = this.canvas.width / numberOfBars,
                    barHeight = 0,
                    discY = 0,
                    discHeight = 5,
                    x = 0,
                    step = Math.floor(this.bufferLength / numberOfBars);

                this.clear(this.canvas.width, this.canvas.height);
                AudioVisualizer.prepareCanvas(this.canvas, width, height);

            for (var i = 0; i < numberOfBars; i++) {
                barHeight = this.dataArray[i * step] * Math.floor(height / @(byte.MaxValue));
                discY = (this.previousDataArray[i * step] * Math.floor(height / @(byte.MaxValue))) + discHeight;
                if (this.dataArray[i * step] > 0) /*then*/ this.dataArray[i * step] -= 1;
                if (this.previousDataArray[i * step] > 0) /*then*/ this.previousDataArray[i * step] -= 1;

                if (barHeight > 0) {
                    this.canvasContext.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';
                    this.canvasContext.fillRect(x, height - barHeight, barWidth - 1, barHeight);
                }

                if (discY >= discHeight) {
                    this.canvasContext.fillStyle = 'white';
                    this.canvasContext.fillRect(x, height - discY - 1, barWidth - 1, discHeight);
                }
                x += barWidth;
            }

            if (this.dataArray.find((value, index) => value > 0) ||
                this.previousDataArray.find((value, index) => value > 0)) /*then*/ window.requestAnimationFrame(this.reset.bind(this));
        }

        start() {
            this.playerStopped = false;
            this.draw();
        }

        pause() {
            this.playerStopped = true;
        }

        close() {
            if (this.audioContext.state !== 'closed') /*then*/ this.audioContext.close();
        }
    }

    initPlayer();
</script>
